{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blank\\\\auth-demo\\\\src\\\\AdditionalDataPage.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport CryptoJS from 'crypto-js';\nconst AdditionalDataPage = ({\n  setMessage\n}) => {\n  var _ref;\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [patronymic, setPatronymic] = useState('');\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [email, setEmail] = useState('');\n  const [city, setCity] = useState('');\n  const [encryptionKey, setEncryptionKey] = useState('');\n  const [errors, setErrors] = useState({});\n  const navigate = useNavigate();\n  const location = useLocation();\n  const userId = (_ref = location.state) === null || _ref === void 0 ? void 0 : _ref.userId;\n  useEffect(() => {\n    const fetchEncryptionKey = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/generate-key', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setEncryptionKey(data.keyHash);\n        } else {\n          console.error('Ошибка при получении хэша ключа');\n        }\n      } catch (error) {\n        console.error('Ошибка сети:', error);\n      }\n    };\n    fetchEncryptionKey();\n  }, []);\n  const encryptData = data => {\n    const jsonData = JSON.stringify(data);\n    return CryptoJS.AES.encrypt(jsonData, encryptionKey).toString();\n  };\n  const namePattern = /^[А-Яа-яёЁ-]+$/;\n  const phonePattern = /^(8\\d{10}|\\+7\\d{11})$/;\n  const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  const validateInput = (value, type) => {\n    switch (type) {\n      case 'firstName':\n      case 'lastName':\n      case 'patronymic':\n      case 'city':\n        return namePattern.test(value) || 'Допустимы только кириллица и дефисы.';\n      case 'phoneNumber':\n        return phonePattern.test(value) || 'Номер телефона должен начинаться с 8 или +7';\n      case 'email':\n        return emailPattern.test(value) || 'Введите корректный адрес электронной почты.';\n      default:\n        return true;\n    }\n  };\n  const handleInputChange = (setter, value, type) => {\n    setter(value);\n    const validationMessage = validateInput(value, type);\n    if (validationMessage !== true) {\n      setErrors(prev => ({\n        ...prev,\n        [type]: validationMessage\n      }));\n    } else {\n      setErrors(prev => ({\n        ...prev,\n        [type]: ''\n      }));\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const newErrors = {};\n    const fields = {\n      firstName,\n      lastName,\n      patronymic,\n      phoneNumber,\n      email,\n      city\n    };\n    for (const [field, value] of Object.entries(fields)) {\n      const validationMessage = validateInput(value, field);\n      if (validationMessage !== true) {\n        newErrors[field] = validationMessage;\n      }\n    }\n    if (Object.keys(newErrors).length > 0) {\n      setErrors(newErrors);\n      return;\n    }\n    const data = {\n      userId,\n      firstName,\n      lastName,\n      patronymic,\n      phoneNumber,\n      email,\n      city\n    };\n    const encryptedData = encryptData(data);\n    try {\n      const response = await fetch('http://localhost:5000/additional-data', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          encryptedData,\n          encryptionKeyHash: encryptionKey\n        })\n      });\n      if (response.ok) {\n        setMessage('Дополнительные данные успешно сохранены');\n        navigate('/login');\n      } else {\n        const result = await response.json();\n        setMessage(result.message || 'Ошибка при сохранении данных');\n      }\n    } catch (error) {\n      console.error('Ошибка при отправке данных:', error);\n      setMessage('Ошибка сети при сохранении данных');\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, \"\\u0414\\u043E\\u043F\\u043E\\u043B\\u043D\\u0438\\u0442\\u0435\\u043B\\u044C\\u043D\\u044B\\u0435 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, [{\n    label: 'Имя',\n    value: firstName,\n    setter: setFirstName,\n    error: errors.firstName,\n    type: 'firstName'\n  }, {\n    label: 'Фамилия',\n    value: lastName,\n    setter: setLastName,\n    error: errors.lastName,\n    type: 'lastName'\n  }, {\n    label: 'Отчество',\n    value: patronymic,\n    setter: setPatronymic,\n    error: errors.patronymic,\n    type: 'patronymic'\n  }, {\n    label: 'Номер телефона',\n    value: phoneNumber,\n    setter: setPhoneNumber,\n    error: errors.phoneNumber,\n    type: 'phoneNumber'\n  }, {\n    label: 'Почта',\n    value: email,\n    setter: setEmail,\n    error: errors.email,\n    type: 'email'\n  }, {\n    label: 'Город проживания',\n    value: city,\n    setter: setCity,\n    error: errors.city,\n    type: 'city'\n  }].map(({\n    label,\n    value,\n    setter,\n    error,\n    type\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    key: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, label, \":\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: value,\n    onChange: e => handleInputChange(setter, e.target.value, type),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }), error && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 23\n    }\n  }, error))), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"submit-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435\")));\n};\nexport default AdditionalDataPage;","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","CryptoJS","AdditionalDataPage","setMessage","_ref","firstName","setFirstName","lastName","setLastName","patronymic","setPatronymic","phoneNumber","setPhoneNumber","email","setEmail","city","setCity","encryptionKey","setEncryptionKey","errors","setErrors","navigate","location","userId","state","fetchEncryptionKey","response","fetch","method","headers","ok","data","json","keyHash","console","error","encryptData","jsonData","JSON","stringify","AES","encrypt","toString","namePattern","phonePattern","emailPattern","validateInput","value","type","test","handleInputChange","setter","validationMessage","prev","handleSubmit","event","preventDefault","newErrors","fields","field","Object","entries","keys","length","encryptedData","credentials","body","encryptionKeyHash","result","message","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","label","map","key","onChange","e","target","required"],"sources":["C:/Users/blank/auth-demo/src/AdditionalDataPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport CryptoJS from 'crypto-js';\r\n\r\ninterface AdditionalDataProps {\r\n  setMessage: (message: string) => void;\r\n}\r\n\r\nconst AdditionalDataPage: React.FC<AdditionalDataProps> = ({ setMessage }) => {\r\n  const [firstName, setFirstName] = useState('');\r\n  const [lastName, setLastName] = useState('');\r\n  const [patronymic, setPatronymic] = useState('');\r\n  const [phoneNumber, setPhoneNumber] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [city, setCity] = useState('');\r\n  const [encryptionKey, setEncryptionKey] = useState('');\r\n  const [errors, setErrors] = useState<{ [key: string]: string }>({});\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const userId = (location.state as { userId: string })?.userId;\r\n\r\n  useEffect(() => {\r\n    const fetchEncryptionKey = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/generate-key', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        });\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setEncryptionKey(data.keyHash);\r\n        } else {\r\n          console.error('Ошибка при получении хэша ключа');\r\n        }\r\n      } catch (error) {\r\n        console.error('Ошибка сети:', error);\r\n      }\r\n    };\r\n\r\n    fetchEncryptionKey();\r\n  }, []);\r\n\r\n  const encryptData = (data: object) => {\r\n    const jsonData = JSON.stringify(data);\r\n    return CryptoJS.AES.encrypt(jsonData, encryptionKey).toString();\r\n  };\r\n\r\n  const namePattern = /^[А-Яа-яёЁ-]+$/;\r\n  const phonePattern = /^(8\\d{10}|\\+7\\d{11})$/;\r\n  const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n  const validateInput = (value: string, type: string) => {\r\n    switch (type) {\r\n      case 'firstName':\r\n      case 'lastName':\r\n      case 'patronymic':\r\n      case 'city':\r\n        return namePattern.test(value) || 'Допустимы только кириллица и дефисы.';\r\n      case 'phoneNumber':\r\n        return phonePattern.test(value) || 'Номер телефона должен начинаться с 8 или +7';\r\n      case 'email':\r\n        return emailPattern.test(value) || 'Введите корректный адрес электронной почты.';\r\n      default:\r\n        return true;\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (setter: React.Dispatch<React.SetStateAction<string>>, value: string, type: string) => {\r\n    setter(value);\r\n    const validationMessage = validateInput(value, type);\r\n    if (validationMessage !== true) {\r\n      setErrors((prev) => ({ ...prev, [type]: validationMessage as string }));\r\n    } else {\r\n      setErrors((prev) => ({ ...prev, [type]: '' }));\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n\r\n    const newErrors: { [key: string]: string } = {};\r\n    const fields = { firstName, lastName, patronymic, phoneNumber, email, city };\r\n\r\n    for (const [field, value] of Object.entries(fields)) {\r\n      const validationMessage = validateInput(value, field);\r\n      if (validationMessage !== true) {\r\n        newErrors[field] = validationMessage as string;\r\n      }\r\n    }\r\n\r\n    if (Object.keys(newErrors).length > 0) {\r\n      setErrors(newErrors);\r\n      return;\r\n    }\r\n\r\n    const data = { userId, firstName, lastName, patronymic, phoneNumber, email, city };\r\n    const encryptedData = encryptData(data);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/additional-data', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify({ encryptedData, encryptionKeyHash: encryptionKey }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        setMessage('Дополнительные данные успешно сохранены');\r\n        navigate('/login');\r\n      } else {\r\n        const result = await response.json();\r\n        setMessage(result.message || 'Ошибка при сохранении данных');\r\n      }\r\n    } catch (error) {\r\n      console.error('Ошибка при отправке данных:', error);\r\n      setMessage('Ошибка сети при сохранении данных');\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <h1>Дополнительные данные</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        {[\r\n          { label: 'Имя', value: firstName, setter: setFirstName, error: errors.firstName, type: 'firstName' },\r\n          { label: 'Фамилия', value: lastName, setter: setLastName, error: errors.lastName, type: 'lastName' },\r\n          { label: 'Отчество', value: patronymic, setter: setPatronymic, error: errors.patronymic, type: 'patronymic' },\r\n          { label: 'Номер телефона', value: phoneNumber, setter: setPhoneNumber, error: errors.phoneNumber, type: 'phoneNumber' },\r\n          { label: 'Почта', value: email, setter: setEmail, error: errors.email, type: 'email' },\r\n          { label: 'Город проживания', value: city, setter: setCity, error: errors.city, type: 'city' }\r\n        ].map(({ label, value, setter, error, type }) => (\r\n          <div className=\"form-group\" key={type}>\r\n            <label>{label}:</label>\r\n            <input\r\n              type=\"text\"\r\n              value={value}\r\n              onChange={(e) => handleInputChange(setter, e.target.value, type)}\r\n              required\r\n            />\r\n            {error && <span className=\"error-message\">{error}</span>}\r\n          </div>\r\n        ))}\r\n        <button type=\"submit\" className=\"submit-button\">Сохранить данные</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdditionalDataPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}